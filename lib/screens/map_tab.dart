// ignore_for_file: prefer_final_fields

import 'dart:collection';
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:prodwo_timesheet/models/employee.dart';
import 'package:prodwo_timesheet/models/position_entry.dart';
import 'package:prodwo_timesheet/tools/colors.dart';
import 'package:prodwo_timesheet/tools/format.dart';
import 'dart:math' as math;
import 'package:label_marker/label_marker.dart';
import 'package:prodwo_timesheet/tools/markers.dart';

class MapTab extends StatefulWidget {
  final Map<Employee, List<PositionEntry>> presentEmployeesPosition;
  final Map<String, List<Employee>> attendanceList;
  const MapTab({Key key, this.presentEmployeesPosition, this.attendanceList})
      : super(key: key);

  @override
  _MapTabState createState() => _MapTabState();
}

class _MapTabState extends State<MapTab> {
  GoogleMapController _mapController;
  Set<Polyline> _polylines = HashSet<Polyline>();
  Set<Circle> _circles = HashSet<Circle>();
  Set<Marker> _markers = HashSet<Marker>();

  // void loadLines() {
  //   int i = 0;
  //   List<LatLng> points = [];
  //   for (var p in widget.presentEmployeesPosition) {
  //     points.add(LatLng(p.lat, p.lng));
  //     _circles.add(Circle(
  //       circleId: CircleId('i'),
  //       center: LatLng(p.lat, p.lng),
  //       fillColor: Colors.black,
  //       strokeWidth: 3,
  //       radius: 1,
  //       visible: true,
  //     ));
  //     i++;
  //   }
  //   _polylines.add(Polyline(
  //       polylineId: PolylineId('test'),
  //       points: points,
  //       color: Colors.red,
  //       visible: true,
  //       width: 2));
  // }

  Future<void> renderEmployeePosition(
      Employee employee, List<PositionEntry> positions, Color color) async {
    // Color color =
    //     Color((math.Random().nextDouble() * 0xFFFFFF).toInt()).withOpacity(1.0);
    print('Checking ${employee}');
    print(isOnMealPeriod(employee, widget.attendanceList));
    Color color = isOnMealPeriod(employee, widget.attendanceList)
        ? Colors.yellow
        : Colors.green;
    if (positions.isEmpty) {
      return;
    }

    var employeeMarker =
        await assignEmployeeMarker('', '', false, color, Colors.red);
    //_markers.clear;
    setState(() {
      _markers.add(Marker(
        markerId: MarkerId(employee.employID.trim() + '_'),
        visible: true,
        anchor: const Offset(0.5, 0.5),
        position: LatLng(positions.last.lat, positions.last.lng),
        icon: BitmapDescriptor.fromBytes(employeeMarker),
      ));
      _markers
          .addLabelMarker(LabelMarker(
              label: employee.fullname.trim(),
              markerId: MarkerId(employee.employID.trim()),
              position: LatLng(positions.last.lat, positions.last.lng),
              anchor: const Offset(.5, 1),
              backgroundColor: primaryColor))
          .then((value) => setState(() {}));
    });
  }

  void renderData() {
    print('render');
    widget.presentEmployeesPosition.forEach((key, value) {
      Color color = Color((math.Random().nextDouble() * 0xFFFFFF).toInt())
          .withOpacity(1.0);
      renderEmployeePosition(key, value, color);
    });
  }

  bool isOnMealPeriod(
      Employee employee, Map<String, List<Employee>> attendance) {
    bool result = false;
    attendance['Meal Period'].forEach((element) {
      if (element.employID.trim() == employee.employID.trim()) {
        result = true;
      }
    });
    // if (attendance['Meal Period'].contains(employee)) {
    //   return true;
    // }
    return result;
  }

  Color statusIndicator(int status) {
    Color statusColor;

    if (status == 0) {
      statusColor = Colors.red;
    } else if (status == 1) {
      statusColor = Colors.green;
    } else if (status == 2) {
      statusColor = Colors.yellow;
    } else if (status == 3) {
      statusColor = Colors.blue;
    }
    return statusColor;
  }

  @override
  void initState() {
    super.initState();
    loadBlancoLayout();
  }

  @override
  Widget build(BuildContext context) {
    return GoogleMap(
        mapType: MapType.satellite,
        myLocationButtonEnabled: false,
        polylines: _polylines,
        circles: _circles,
        markers: _markers,
        polygons: _polygons,
        onMapCreated: (GoogleMapController controller) {
          _mapController = controller;
          //_mapController.setMapStyle(getMapTheme());
          renderData();
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(36.68581838714097, -121.71202104538678),
          zoom: 10.0,
        ));
  }

  // Read in Blanco Ranch Overlays
  Set<Polygon> _polygons = {};
  List<String> blockNumbers = [];
  Set<Marker> _blockMarkers = HashSet<Marker>();

  void loadBlancoLayout() {
    loadranchfivejson();
    loadranchtwelvejson();
    loadranchnineteenjson();
    loadranchtwentyjson();
    loadranchtwentyeightjson();

    // add the block numbers
    loadBlockNumbers();
  }

  void loadranchfivejson() {
    String polygonId = "0101$_polygonIdCounter";
    Map ranchFive = Map<int, List<LatLng>>();
    List<List<LatLng>> ranchFiveBlocks = [
      // Block 1
      [
        LatLng(36.69758386185385, -121.70083690434694),
        LatLng(36.69957824629741, -121.70306514948606),
        LatLng(36.70079571205339, -121.70115508139133),
        LatLng(36.70064517637406, -121.70107528567314),
        LatLng(36.700430662521605, -121.7009800672531),
        LatLng(36.700223943718946, -121.70086272060871),
        LatLng(36.700025557661235, -121.70073565095664),
        LatLng(36.69984840761871, -121.70061528682707),
        LatLng(36.699695450728534, -121.70049961656332),
        LatLng(36.69946883741259, -121.70036081224681),
        LatLng(36.6993384605283, -121.7002786695957),
        LatLng(36.69916130890231, -121.70018143951893),
        LatLng(36.69902716802166, -121.7001113668084),
        LatLng(36.6988701771947, -121.70005101710557),
        LatLng(36.6986879168941, -121.69996920973063),
        LatLng(36.69832016913129, -121.69970802962781)
      ],
      // Block 2
      [
        LatLng(36.699584697922106, -121.70307219028471),
        LatLng(36.70007743915937, -121.70358918607236),
        LatLng(36.700481737302674, -121.70395731925964),
        LatLng(36.70089382890001, -121.70436568558216),
        LatLng(36.701431990855795, -121.70488134026527),
        LatLng(36.70262147132127, -121.70301519334316),
        LatLng(36.702476315369246, -121.70287974178791),
        LatLng(36.70235212617046, -121.70274026691914),
        LatLng(36.70227685989171, -121.7026648297906),
        LatLng(36.70217229340354, -121.70254781842232),
        LatLng(36.70201745947345, -121.7023791745305),
        LatLng(36.70186934547414, -121.70218169689178),
        LatLng(36.701787358473375, -121.70206502079964),
        LatLng(36.70171504855421, -121.70195773243903),
        LatLng(36.701666393886335, -121.70188430696724),
        LatLng(36.70159784720251, -121.70180082321167),
        LatLng(36.70154166575724, -121.70173946768045),
        LatLng(36.70145349575077, -121.7016663774848),
        LatLng(36.70133548756554, -121.70156713575123),
        LatLng(36.701215597515315, -121.70145951211452),
        LatLng(36.70104624578041, -121.7013116553426),
        LatLng(36.70079651849374, -121.7011547461152)
      ],
      // Block 3
      [
        LatLng(36.701433334911925, -121.70488134026527),
        LatLng(36.70341176002874, -121.70677263289689),
        LatLng(36.703499658984875, -121.70664422214033),
        LatLng(36.70359965400536, -121.70674379914999),
        LatLng(36.703526270575594, -121.70687120407818),
        LatLng(36.70363406086406, -121.70697011053561),
        LatLng(36.70370153051882, -121.70684907585384),
        LatLng(36.704792057719004, -121.70513078570366),
        LatLng(36.70474824339236, -121.70508485287428),
        LatLng(36.70467512985914, -121.70498695224522),
        LatLng(36.704586694646984, -121.70489206910133),
        LatLng(36.70450229134048, -121.70481361448766),
        LatLng(36.704438316798004, -121.704743206501),
        LatLng(36.704330796438576, -121.70464999973775),
        LatLng(36.70424397363856, -121.704584620893),
        LatLng(36.70413645300727, -121.70450549572706),
        LatLng(36.70407892940774, -121.70446157455446),
        LatLng(36.70404801717526, -121.70442905277012),
        LatLng(36.70389721906291, -121.70429058372976),
        LatLng(36.70381093337892, -121.70420676469803),
        LatLng(36.703722497172365, -121.70410986989737),
        LatLng(36.703665510869875, -121.7040615901351),
        LatLng(36.70369776727271, -121.70409210026264),
        LatLng(36.70351820645818, -121.7039217799902),
        LatLng(36.70339348133412, -121.70379303395748),
        LatLng(36.70321123175871, -121.7036123201251),
        LatLng(36.70313704154231, -121.70353319495916),
        LatLng(36.70307172183598, -121.70347217470409),
        LatLng(36.703028981751174, -121.70340947806834),
        LatLng(36.702869848647815, -121.70324418693781),
        LatLng(36.70276044444812, -121.70313958078623),
        LatLng(36.7026263098483, -121.70301519334316)
      ],
      // Block 4
      [
        LatLng(36.70538475827225, -121.70871824026108),
        LatLng(36.707478392705184, -121.70788977295162),
        LatLng(36.70736173772297, -121.70773219317199),
        LatLng(36.70726551066887, -121.70764099806549),
        LatLng(36.707124664148985, -121.70751426368952),
        LatLng(36.70704805858608, -121.70744352042676),
        LatLng(36.70692495194257, -121.7073466256261),
        LatLng(36.70668733943542, -121.70715920627117),
        LatLng(36.70645940276529, -121.70686081051826),
        LatLng(36.70627097819149, -121.70658152550457),
        LatLng(36.70605809281046, -121.7062807828188),
        LatLng(36.70582800390722, -121.70604810118675),
        LatLng(36.70558017373387, -121.70581541955471),
        LatLng(36.705475342942776, -121.70570209622383),
        LatLng(36.70530922616564, -121.70554585754871),
        LatLng(36.705144453020644, -121.70540872961284),
        LatLng(36.70497779793063, -121.70529775321482),
        LatLng(36.70489420145098, -121.70532256364822),
        LatLng(36.704312786763666, -121.70619897544385),
        LatLng(36.70382840556576, -121.70695535838603),
        LatLng(36.70378862273459, -121.7070696875453),
        LatLng(36.703820341480025, -121.70719306915997)
      ],
      // Block 5
      [
        LatLng(36.70477673614749, -121.70476600527763),
        LatLng(36.704683462655034, -121.7047556117177),
        LatLng(36.70438213742897, -121.70446023344992),
        LatLng(36.703989955905, -121.70412093400955),
        LatLng(36.703608524525094, -121.70372430235147),
        LatLng(36.70340477111661, -121.7035435885191),
        LatLng(36.703132740658006, -121.703252568841),
        LatLng(36.70295479135883, -121.70304402709007),
        LatLng(36.70249378785947, -121.7025739699602),
        LatLng(36.70208170483994, -121.70211732387544),
        LatLng(36.70195348286267, -121.70198488980532),
        LatLng(36.70178977776316, -121.70171767473222),
        LatLng(36.70152930045756, -121.70145180076359),
        LatLng(36.70165671671114, -121.70127544552086),
        LatLng(36.70179542277241, -121.70137703418732),
        LatLng(36.70236072802619, -121.70160602778198),
        LatLng(36.70283194696482, -121.70177802443504),
        LatLng(36.70395904363674, -121.70215990394354),
        LatLng(36.7055473805274, -121.70388087630272),
        LatLng(36.70558044253058, -121.70397911220788)
      ],
      // Block 6
      [
        LatLng(36.708119991942006, -121.70763328671455),
        LatLng(36.70816138525719, -121.70758802443743),
        LatLng(36.708157622229464, -121.70755483210087),
        LatLng(36.70808263042409, -121.70745257288218),
        LatLng(36.707616550680875, -121.70681219547987),
        LatLng(36.707264704296406, -121.70632034540178),
        LatLng(36.70664191343129, -121.70547947287561),
        LatLng(36.70614222561358, -121.7047790810466),
        LatLng(36.70586778568273, -121.7043787613511),
        LatLng(36.705838218148834, -121.70438144356012),
        LatLng(36.70528557196751, -121.70489341020586),
        LatLng(36.70521219014748, -121.70500371605158),
        LatLng(36.70518154716893, -121.70506037771702),
        LatLng(36.705361641692335, -121.7053198814392),
        LatLng(36.705611354146704, -121.70556697994472),
        LatLng(36.70577155675799, -121.70570477843283),
        LatLng(36.70590676105094, -121.70582011342047),
        LatLng(36.70605271690936, -121.7059689760208),
        LatLng(36.706172599414444, -121.70609604567288),
        LatLng(36.70628871861329, -121.70624256134032),
        LatLng(36.706388710005015, -121.70639980584383),
        LatLng(36.70654219116235, -121.70662075281142),
        LatLng(36.70668492029978, -121.70680850744247),
        LatLng(36.706823886079086, -121.70696407556535),
        LatLng(36.707120363487824, -121.70722123235466),
        LatLng(36.7072636291331, -121.7073405906558),
        LatLng(36.7073044853282, -121.70738015323877),
        LatLng(36.70743914934384, -121.70751258730888),
        LatLng(36.70747301690347, -121.70754276216032),
        LatLng(36.70765579395163, -121.7077412456274),
        LatLng(36.70766896463391, -121.70770704746245),
        LatLng(36.70777352364365, -121.70774962753057),
        LatLng(36.70785496668122, -121.70772347599267),
        LatLng(36.70799339276819, -121.7076785489917),
        LatLng(36.708130743454596, -121.70762926340102)
      ],
      // Block 7
      [
        LatLng(36.70398377345236, -121.70213676989077),
        LatLng(36.70447594888825, -121.7027010396123),
        LatLng(36.7044883137139, -121.70271914452313),
        LatLng(36.707047252211325, -121.70029643923043),
        LatLng(36.70680802732782, -121.70014087110758),
        LatLng(36.706633312054706, -121.70002687722445),
        LatLng(36.70652982666715, -121.69995881617069),
        LatLng(36.70641505180162, -121.69986728578805)
      ],
      // Block 8
      [
        LatLng(36.7044810560991, -121.70271981507541),
        LatLng(36.705589312821694, -121.70391842722894),
        LatLng(36.705767524817155, -121.70415177941322),
        LatLng(36.7058788063061, -121.70407131314279),
        LatLng(36.70600460257782, -121.70389361679554),
        LatLng(36.706143838382076, -121.70365758240223),
        LatLng(36.706421771646255, -121.7031281813979),
        LatLng(36.70659890653871, -121.70279793441296),
        LatLng(36.70679915717736, -121.7024341598153),
        LatLng(36.70695048717959, -121.7021159827709),
        LatLng(36.707183529424384, -121.70172974467276),
        LatLng(36.70739399257448, -121.70138273388149),
        LatLng(36.70759424114132, -121.7010424286127),
        LatLng(36.70771116455985, -121.70083690434694),
        LatLng(36.7077122397169, -121.70076750218868),
        LatLng(36.70767434042194, -121.70070245862007),
        LatLng(36.70704994012712, -121.70030012726785),
        LatLng(36.70595944496551, -121.70133378356697),
        LatLng(36.7044810560991, -121.7027124390006)
      ],
      // Block 9
      [
        LatLng(36.70832185133979, -121.70394390821457),
        LatLng(36.70811031557938, -121.70367199927567),
        LatLng(36.708054676470724, -121.70377794653176),
        LatLng(36.70799957489827, -121.70371893793344),
        LatLng(36.70805279495426, -121.7036096379161),
        LatLng(36.7070324686727, -121.70228697359562),
        LatLng(36.70618765191307, -121.70392278581858),
        LatLng(36.70608470351533, -121.70401398092507),
        LatLng(36.70597745425456, -121.70415982604027),
        LatLng(36.705892246088546, -121.70433752238749),
        LatLng(36.70660025050448, -121.70533463358878),
        LatLng(36.70722384808014, -121.70619763433933),
        LatLng(36.707534569810875, -121.70559145510195)
      ],
      // Block 10
      [
        LatLng(36.70887501325697, -121.707309409976),
        LatLng(36.70918653466365, -121.70668914914133),
        LatLng(36.709441072787484, -121.7061885818839),
        LatLng(36.709624651502345, -121.70584056526424),
        LatLng(36.70961524411181, -121.70578289777042),
        LatLng(36.70957734575541, -121.70573394745588),
        LatLng(36.709393766927526, -121.70549690723418),
        LatLng(36.709284640798565, -121.70535475015642),
        LatLng(36.70901209358288, -121.70499097555876),
        LatLng(36.708914524670114, -121.70486222952606),
        LatLng(36.708599239154594, -121.70436635613441),
        LatLng(36.70845301934601, -121.70413065701725),
        LatLng(36.7083186258942, -121.70394424349071),
        LatLng(36.707676759526436, -121.70529305934906),
        LatLng(36.707431892007705, -121.70579094439745),
        LatLng(36.70722357928918, -121.70619562268257),
        LatLng(36.708045537676064, -121.70733086764814),
        LatLng(36.70818611372059, -121.70750722289087),
        LatLng(36.70824632211988, -121.70752365142107),
        LatLng(36.70828610264354, -121.7075316980481),
        LatLng(36.70835195549216, -121.70751728117466),
        LatLng(36.70842479674061, -121.70748811215162),
        LatLng(36.70886802484164, -121.70730873942375)
      ],
      // Block 11
      [
        LatLng(36.70846807139796, -121.70406863093378),
        LatLng(36.70806704072056, -121.70351441949607),
        LatLng(36.70778481278273, -121.7031576856971),
        LatLng(36.70767353405375, -121.70300010591744),
        LatLng(36.70736765111344, -121.70260682702065),
        LatLng(36.707063648496295, -121.70224472880362),
        LatLng(36.707327332533126, -121.70174885541202),
        LatLng(36.707476511174626, -121.70150946825741),
        LatLng(36.70768025378833, -121.7012033611536),
        LatLng(36.70777728669021, -121.70109439641236),
        LatLng(36.707869481272915, -121.70101057738066),
        LatLng(36.70804284979508, -121.70095391571522),
        LatLng(36.70822885093743, -121.70100521296264),
        LatLng(36.70850408879607, -121.70114669948815),
        LatLng(36.70869949632581, -121.70127142220737),
        LatLng(36.70907257011952, -121.70153360813858),
        LatLng(36.70933033402415, -121.70171264559029),
        LatLng(36.709550198694295, -121.70195002108814),
        LatLng(36.70878497016473, -121.7034225538373),
        LatLng(36.70853526802259, -121.70391239225864)
      ],
      // Block 12
      [
        LatLng(36.709660937140804, -121.70576144009829),
        LatLng(36.70984370898497, -121.70540336519481),
        LatLng(36.7100821180754, -121.70494571328162),
        LatLng(36.71049845867033, -121.70401632785797),
        LatLng(36.71049012650494, -121.70395564287901),
        LatLng(36.71044389640964, -121.7037769407034),
        LatLng(36.71039094678957, -121.70363243669273),
        LatLng(36.710329933730335, -121.70349195599556),
        LatLng(36.71026784550138, -121.70335650444031),
        LatLng(36.710219733808934, -121.70326229184865),
        LatLng(36.710152001095885, -121.70307990163565),
        LatLng(36.71009716980827, -121.70293942093849),
        LatLng(36.71004153213819, -121.70278687030077),
        LatLng(36.70998240027076, -121.70264773070814),
        LatLng(36.70992165566865, -121.70251831412315),
        LatLng(36.709853922692865, -121.702398955822),
        LatLng(36.70978081401707, -121.70228730887176),
        LatLng(36.70970501744887, -121.70216694474219),
        LatLng(36.70962653298033, -121.70205764472485),
        LatLng(36.709546973300256, -121.70194666832684),
        LatLng(36.70903386514156, -121.70294009149076),
        LatLng(36.7084669962515, -121.70407366007566),
        LatLng(36.70877986323991, -121.70458227396011),
        LatLng(36.708954036062956, -121.70486591756345),
        LatLng(36.70937333938808, -121.70540135353805),
        LatLng(36.70965502392682, -121.70576613396405)
      ],
      // Block 13
      [
        LatLng(36.70887608839773, -121.70730739831923),
        LatLng(36.71011195275731, -121.70679744333029),
        LatLng(36.710624784938, -121.70661471784115),
        LatLng(36.71085942870958, -121.70654129236937),
        LatLng(36.71093146124714, -121.70640751719476),
        LatLng(36.71091318434103, -121.70630861073732),
        LatLng(36.71087824318487, -121.706204675138),
        LatLng(36.710831744544734, -121.70609604567288),
        LatLng(36.710615377669924, -121.70563939958812),
        LatLng(36.71051109130644, -121.7053684964776),
        LatLng(36.71045679783438, -121.70517336577176),
        LatLng(36.71042454426848, -121.70500606298447),
        LatLng(36.710430188643485, -121.7048079147935),
        LatLng(36.7104672802404, -121.70456048101188),
        LatLng(36.71048932016632, -121.70445553958416),
        LatLng(36.7105156605573, -121.70427314937115),
        LatLng(36.71051001618855, -121.70413468033074),
        LatLng(36.7104963084342, -121.7040203511715),
        LatLng(36.710078086360745, -121.70495107769965),
        LatLng(36.70977463203026, -121.70553613454103),
        LatLng(36.70962492028492, -121.70583989471197),
        LatLng(36.70900107340886, -121.70705962926148)
      ]
    ];

    for (int i = 0; i < ranchFiveBlocks.length; i++) {
      polygonId = "$i";
      ranchFive[i] = ranchFiveBlocks[i];
      hardcodePoly(ranchFive[i], polygonId);
      //print(polygonId);
      if (i < 10) {
        polygonId = '0$i';
      }
    }
  }

  void loadranchtwelvejson() {
    Map ranchTwelve = Map<int, List<LatLng>>();
    String polygonId = "0101$_polygonIdCounter";

    List<List<LatLng>> ranchTwelveBlocks = [
      // Block 1
      [
        LatLng(36.69024540429189, -121.70793637633325),
        LatLng(36.69027632207496, -121.70869376510382),
        LatLng(36.69060189901845, -121.70869376510382),
        LatLng(36.69059947937657, -121.70875813812017),
        LatLng(36.69061480377395, -121.709151417017),
        LatLng(36.69072073022671, -121.70938979834318),
        LatLng(36.690857842931095, -121.70961242169142),
        LatLng(36.69098957843639, -121.70979280024766),
        LatLng(36.69108797664616, -121.70996345579626),
        LatLng(36.6910930847465, -121.71012472361326),
        LatLng(36.69111889409044, -121.71045999974014),
        LatLng(36.69112158256326, -121.7108241096139),
        LatLng(36.69127159919815, -121.71170521527529),
        LatLng(36.691419195924226, -121.71200428158046),
        LatLng(36.691419195924226, -121.71208843588829),
        LatLng(36.68991014718511, -121.71210754662752),
        LatLng(36.688643577273204, -121.71210017055273),
        LatLng(36.688646803544444, -121.71098068356514),
        LatLng(36.68866212833097, -121.70987293124199),
        LatLng(36.688652987230604, -121.70795649290085),
        LatLng(36.6902298109705, -121.70794878154993)
      ],
      // Block 2
      [
        LatLng(36.69260587405976, -121.71456344425678),
        LatLng(36.68960983945789, -121.71461407095194),
        LatLng(36.68870299441344, -121.7122460156679),
        LatLng(36.68870299441344, -121.71218231320381),
        LatLng(36.691464630924976, -121.71219505369663),
        LatLng(36.69150119398299, -121.71225104480983),
        LatLng(36.69165228525894, -121.71314623206855),
        LatLng(36.69170928046739, -121.71331923455001),
        LatLng(36.691872469344794, -121.71352509409188),
        LatLng(36.69202732370885, -121.71373665332794),
        LatLng(36.69214158237127, -121.71388417482376),
        LatLng(36.69226793881197, -121.71406220644712),
        LatLng(36.692614745848154, -121.71456813812257)
      ],
      // Block 3
      [
        LatLng(36.6895609082757, -121.71471398323774),
        LatLng(36.68961414109878, -121.71462144702673),
        LatLng(36.68961924929702, -121.71680409461258),
        LatLng(36.693133071587724, -121.7167990654707),
        LatLng(36.69312608174105, -121.71506702899933),
        LatLng(36.69264996414961, -121.7146073654294),
        LatLng(36.69262012268912, -121.71457283198835)
      ],
      // Block 4
      [
        LatLng(36.68952730167653, -121.72112781554462),
        LatLng(36.689525688559385, -121.71983029693367),
        LatLng(36.68600847504006, -121.71981487423182),
        LatLng(36.68600390433231, -121.72063428908587),
        LatLng(36.68603751247129, -121.72074291855098),
        LatLng(36.68641338489676, -121.72111943364143),
        LatLng(36.68951547215011, -121.72111742198467)
      ],
      // Block 5
      [
        LatLng(36.68955606892634, -121.71977195888756),
        LatLng(36.68599745156796, -121.71975921839474),
        LatLng(36.68599449405077, -121.71835977584124),
        LatLng(36.68955418695705, -121.7183567583561),
        LatLng(36.68954880990169, -121.71976692974567)
      ],
      // Block 6
      [
        LatLng(36.68955096072388, -121.71834368258713),
        LatLng(36.68955096072388, -121.71673737466334),
        LatLng(36.686009550500685, -121.71676352620125),
        LatLng(36.68598562149856, -121.71684734523296),
        LatLng(36.68601680985943, -121.71739652752875),
        LatLng(36.68601573439891, -121.71766240149736),
        LatLng(36.686004442062654, -121.71809457242489),
        LatLng(36.68599261199433, -121.7183554172516)
      ],
      // Block 7
      [
        LatLng(36.68953294758621, -121.71672429889442),
        LatLng(36.68954531481552, -121.71466670930386),
        LatLng(36.68602111170128, -121.71470392495392),
        LatLng(36.68602272489195, -121.71675380319355)
      ],
      // Block 8
      [
        LatLng(36.68953832464269, -121.71465732157229),
        LatLng(36.689525957412236, -121.71458188444376),
        LatLng(36.68947164911597, -121.71441759914158),
        LatLng(36.688668312015906, -121.71232983469964),
        LatLng(36.68860459315175, -121.71210754662752),
        LatLng(36.68600632411882, -121.7121172696352),
        LatLng(36.685999871354646, -121.71468447893858)
      ],
      // Block 9
      [
        LatLng(36.68860217344702, -121.7121045291424),
        LatLng(36.68859948488608, -121.70804936438799),
        LatLng(36.688571523847, -121.70800812542437),
        LatLng(36.686081337462404, -121.70802891254424),
        LatLng(36.686049880262715, -121.70805741101503),
        LatLng(36.686029715384336, -121.70817375183105),
        LatLng(36.68601680985943, -121.71036344021557),
        LatLng(36.68602272489195, -121.71071212738752),
        LatLng(36.6860133146127, -121.71210017055273)
      ],
      // Block 10
      [
        LatLng(36.685953626529006, -121.70782372355463),
        LatLng(36.68384273572806, -121.707848533988),
        LatLng(36.68378385257861, -121.70775767415762),
        LatLng(36.68377820624685, -121.70757964253427),
        LatLng(36.6837338421971, -121.70411322265863),
        LatLng(36.68375481429654, -121.70365892350674),
        LatLng(36.68378008835748, -121.70334443449974),
        LatLng(36.683836282782366, -121.70312784612177),
        LatLng(36.68384569332799, -121.70310169458389),
        LatLng(36.68549494088057, -121.70162346214056),
        LatLng(36.68553123791022, -121.70161474496126),
        LatLng(36.6855481765182, -121.70164626091719),
        LatLng(36.68555516705374, -121.70172840356827),
        LatLng(36.68566567120415, -121.70300412923098),
        LatLng(36.685710571871965, -121.70352648943661),
        LatLng(36.6858001042631, -121.70415010303257),
        LatLng(36.68594986241406, -121.70537520200016),
        LatLng(36.685960348162354, -121.70670859515667),
        LatLng(36.685978631002136, -121.70781299471854)
      ],
      // Block 11
      [
        LatLng(36.69311586581012, -121.72018703073262),
        LatLng(36.68958510501804, -121.72016791999339),
        LatLng(36.68956467221391, -121.71687349677084),
        LatLng(36.69313118970599, -121.71690534800291)
      ],
      // Block 12
      [
        LatLng(36.685933730490824, -121.71109769493341),
        LatLng(36.683731691212216, -121.71108964830637),
        LatLng(36.68374244613602, -121.7079756036401),
        LatLng(36.68586705183882, -121.70794878154993),
        LatLng(36.68593803233734, -121.70806143432857),
        LatLng(36.68593803233734, -121.71108160167934)
      ],
      // Block 13
      [
        LatLng(36.683691629107834, -121.71108428388834),
        LatLng(36.681202898007584, -121.71109635382892),
        LatLng(36.681245919108136, -121.70797728002071),
        LatLng(36.683710450233285, -121.70795615762472)
      ],
      // Block 14
      [
        LatLng(36.6811875717347, -121.71111680567263),
        LatLng(36.67899480771293, -121.71111077070238),
        LatLng(36.6788735383753, -121.71101991087197),
        LatLng(36.678820029227616, -121.7108717188239),
        LatLng(36.67880550915097, -121.70815262943506),
        LatLng(36.67887111836439, -121.70809227973223),
        LatLng(36.68120935117421, -121.70807719230653)
      ],
      // Block 15
      [
        LatLng(36.683735993181934, -121.70786228030921),
        LatLng(36.67905208119172, -121.70789178460836),
        LatLng(36.67896684318196, -121.70771341770887),
        LatLng(36.67895581870062, -121.70757595449687),
        LatLng(36.67896872541032, -121.70746430754663),
        LatLng(36.67904885451801, -121.70733790844679),
        LatLng(36.68071998450302, -121.70586604624988),
        LatLng(36.68164574531039, -121.70505065470934),
        LatLng(36.682571763853154, -121.70422285795212),
        LatLng(36.68349615800392, -121.70340411365031),
        LatLng(36.683691091361325, -121.7032264173031),
        LatLng(36.68374782359735, -121.70323580503462),
        LatLng(36.68373196008534, -121.70349095016716),
        LatLng(36.683705610515766, -121.704063937068),
        LatLng(36.6837037284033, -121.70490682125092),
        LatLng(36.68371340783831, -121.70579630881548),
        LatLng(36.6837120634724, -121.70620836317539),
        LatLng(36.68372362501838, -121.70681823045014),
        LatLng(36.68373518656263, -121.7075927183032)
      ],
      // Block 16
      [
        LatLng(36.68050057513853, -121.70595355331898),
        LatLng(36.67989665838614, -121.70650474727152),
        LatLng(36.679860358697425, -121.70641757547857),
        LatLng(36.67971650420705, -121.7065453156829),
        LatLng(36.67975925725191, -121.7066180706024),
        LatLng(36.67902815002501, -121.70727554708718),
        LatLng(36.6789308119444, -121.70738250017166),
        LatLng(36.67888805843909, -121.70709013938904),
        LatLng(36.678889402889325, -121.70675553381443),
        LatLng(36.67886600945226, -121.70641791075467),
        LatLng(36.67882191145957, -121.70608967542648),
        LatLng(36.67873505985132, -121.70571617782116),
        LatLng(36.6786611149063, -121.70546572655441),
        LatLng(36.678558667428696, -121.70522667467593),
        LatLng(36.67844331301893, -121.70497622340918),
        LatLng(36.67827606226217, -121.70463189482689),
        LatLng(36.679309945762945, -121.70366127043962),
        LatLng(36.67935538791793, -121.70372765511273),
        LatLng(36.67943820550411, -121.70365959405899),
        LatLng(36.68050891055472, -121.70593846589328)
      ],
      // Block 17
      [
        LatLng(36.68057048505298, -121.70592471957207),
        LatLng(36.68216199395675, -121.70453365892172),
        LatLng(36.681033502190296, -121.70210827141999),
        LatLng(36.679461867655206, -121.70355297625063)
      ],
      // Block 18
      [
        LatLng(36.6821574230204, -121.70453064143658),
        LatLng(36.68386424554309, -121.70299675315619),
        LatLng(36.682674474862964, -121.70059986412524),
        LatLng(36.68103941760606, -121.70209553092717)
      ],
      // Block 19
      [
        LatLng(36.68385483499975, -121.70299407094718),
        LatLng(36.685494672013625, -121.70154802501202),
        LatLng(36.68437698397834, -121.69911861419678),
        LatLng(36.68266479529722, -121.70059248805045)
      ],
      // Block 20
      [
        LatLng(36.6854863371377, -121.70154802501202),
        LatLng(36.68622518004926, -121.70100823044778),
        LatLng(36.686595405432584, -121.70070145279169),
        LatLng(36.6869688553753, -121.70036986470222),
        LatLng(36.68713232317412, -121.70023005455732),
        LatLng(36.68714227103883, -121.70016232877971),
        LatLng(36.68705408451773, -121.69996585696936),
        LatLng(36.68602406921746, -121.6977359354496),
        LatLng(36.685984814902845, -121.69770542532206),
        LatLng(36.685956046317095, -121.69769469648598),
        LatLng(36.68591894289154, -121.69770944863558),
        LatLng(36.6857869298337, -121.69784456491472),
        LatLng(36.685613511114006, -121.69800281524657),
        LatLng(36.68512121491242, -121.69845543801783),
        LatLng(36.6843726820445, -121.69911056756973)
      ],
      // Block 21
      [
        LatLng(36.685950937875496, -121.69760081917046),
        LatLng(36.68591275898554, -121.69765178114174),
        LatLng(36.684817124313454, -121.69863983988762),
        LatLng(36.684312186074266, -121.69910922646521),
        LatLng(36.683185607979546, -121.69677503407),
        LatLng(36.68477356747139, -121.69529512524606),
        LatLng(36.68484159141762, -121.69530015438795),
        LatLng(36.68500076183929, -121.69558648020029),
        LatLng(36.68504378081564, -121.69581849128006),
        LatLng(36.68509163939855, -121.69592946767807),
        LatLng(36.68514675739251, -121.69592946767807),
        LatLng(36.68530619605025, -121.69623389840126),
        LatLng(36.68572670384205, -121.69710125774144)
      ],
      // Block 22
      [
        LatLng(36.683179692728835, -121.69677805155517),
        LatLng(36.681543839569166, -121.69829148799181),
        LatLng(36.68264543616207, -121.70055862516163),
        LatLng(36.68429847364772, -121.69911526143551)
      ],
      // Block 23
      [
        LatLng(36.682642209639056, -121.70056901872158),
        LatLng(36.68104990402382, -121.70202411711217),
        LatLng(36.68082242910229, -121.70155573636295),
        LatLng(36.67998888640707, -121.69974323362112),
        LatLng(36.68153657978827, -121.69829785823823)
      ],
      // Block 24
      [
        LatLng(36.68104210643126, -121.70202814042568),
        LatLng(36.67944196993772, -121.70348223298788),
        LatLng(36.678366947766754, -121.70126639306545),
        LatLng(36.679979475389594, -121.69973954558372)
      ],
      // Block 25
      [
        LatLng(36.6793812012011, -121.70350704342128),
        LatLng(36.67825455088444, -121.70455109328033),
        LatLng(36.678205343585226, -121.70454002916814),
        LatLng(36.67819136117751, -121.70443139970303),
        LatLng(36.678216637066505, -121.7043274641037),
        LatLng(36.678317740539434, -121.70414473861456),
        LatLng(36.6783392518995, -121.70393552631138),
        LatLng(36.67836210771299, -121.70385036617516),
        LatLng(36.678674021665465, -121.70355129987001),
        LatLng(36.67851214923766, -121.70320630073549),
        LatLng(36.67824702190079, -121.70346144586802),
        LatLng(36.67818517665023, -121.70381583273411),
        LatLng(36.67789342773247, -121.7040629312396),
        LatLng(36.67693642973658, -121.70249115675689),
        LatLng(36.6782951536049, -121.70124527066945),
        LatLng(36.679376361211176, -121.70349832624196)
      ],
      // Block 30
      [
        LatLng(36.68153469762273, -121.72803081572056),
        LatLng(36.67879018240042, -121.72801539301872),
        LatLng(36.67882083589847, -121.72585856169464),
        LatLng(36.68155325039526, -121.72585856169464)
      ],
      // Block 31
      [
        LatLng(36.681602186672364, -121.72802310436964),
        LatLng(36.68162047054813, -121.72588136047126),
        LatLng(36.68583183043075, -121.72586627304553),
        LatLng(36.68582564651772, -121.72806132584812)
      ],

      // Block 33
      [
        LatLng(36.69047661523806, -121.72589745372534),
        LatLng(36.68638219669673, -121.72590650618076),
        LatLng(36.68628271700866, -121.7243253439665),
        LatLng(36.6881007552106, -121.72428544610737),
        LatLng(36.688509149184746, -121.72456439584492),
        LatLng(36.689123483632116, -121.72476824373007),
        LatLng(36.689499878680685, -121.72505155205725),
        LatLng(36.69046935630032, -121.72589745372534)
      ],
      // Block 41
      [
        LatLng(36.68959343944974, -121.7077737674117),
        LatLng(36.68606171032224, -121.7078146710992),
        LatLng(36.68602514467785, -121.70773722231388),
        LatLng(36.685992343129115, -121.70592840760946),
        LatLng(36.68973915743226, -121.70581977814436),
        LatLng(36.69016555569901, -121.70672401785849),
        LatLng(36.68966253454231, -121.7068376764655),
        LatLng(36.68960795748991, -121.7077513039112)
      ],
      // Block 42
      [
        LatLng(36.68575627911171, -121.70356906950474),
        LatLng(36.68868363679813, -121.70354492962359),
        LatLng(36.68971146565978, -121.70579832047224),
        LatLng(36.68599825816352, -121.7058989033103),
        LatLng(36.685985890363774, -121.70528735965492),
        LatLng(36.685851726495294, -121.70417994260788),
        LatLng(36.685763807360345, -121.70353822410107)
      ],
      // Block 43
      [
        LatLng(36.68576165643223, -121.70354425907135),
        LatLng(36.68559495932083, -121.70168850570917),
        LatLng(36.68563152516976, -121.70153193175794),
        LatLng(36.68715705840288, -121.70030213892461),
        LatLng(36.68866643002489, -121.70353051275015)
      ],

      // skip over
      // 26-29, 34-40,
    ];

    for (int i = 0; i < ranchTwelveBlocks.length; i++) {
      polygonId = "$i";
      ranchTwelve[i] = ranchTwelveBlocks[i];
      hardcodePoly(ranchTwelve[i], polygonId);
      //print(polygonId);
      if (i < 10) {
        polygonId = '0$i';
      }
    }
  }

  void loadranchnineteenjson() {
    Map<String, dynamic> ranchOneEdges = Map<String, dynamic>.from({});

    DefaultAssetBundle.of(context)
        .loadString("lib/assets/ranches/Ranch_19.geojson")
        .then((data) {
      ranchOneEdges = jsonDecode(data);

      ranchOneEdges['features'].forEach((v) {
        try {
          _polygons.add(Polygon(
              polygonId: PolygonId(v['geometry']['coordinates'].toString()),
              points: v['geometry']['coordinates']
                  .map<LatLng>((e) => LatLng(
                      double.parse((e[1]).toStringAsFixed(5)),
                      double.parse((e[0]).toStringAsFixed(5))))
                  .toList(),
              visible: true,
              strokeColor: Colors.blue,
              fillColor: Colors.blue.withOpacity(0.25),
              strokeWidth: 2));
        } catch (e) {
          print(e);
        }
      });
      setState(() {});
    });
  }

  void loadranchtwentyjson() {
    Map<String, dynamic> ranchOneEdges = Map<String, dynamic>.from({});

    DefaultAssetBundle.of(context)
        .loadString("lib/assets/ranches/Ranch_20.geojson")
        .then((data) {
      ranchOneEdges = jsonDecode(data);
      ranchOneEdges['features'].forEach((v) {
        try {
          _polygons.add(Polygon(
              polygonId: PolygonId(v['geometry']['coordinates'].toString()),
              points: v['geometry']['coordinates']
                  .map<LatLng>((e) => LatLng(
                      double.parse((e[1] + 0.30809385465).toStringAsFixed(5)),
                      double.parse(
                          (e[0] + 0.30043034832 * -1).toStringAsFixed(5))))
                  .toList(),
              visible: true,
              strokeColor: Colors.blue,
              fillColor: Colors.blue.withOpacity(0.25),
              strokeWidth: 2));
        } catch (e) {
          print(e);
        }
      });
      setState(() {});
    });
  }

  void loadranchtwentyeightjson() {
    Map<String, dynamic> ranchOneEdges = Map<String, dynamic>.from({});

    DefaultAssetBundle.of(context)
        .loadString("lib/assets/ranches/Ranch_28.geojson")
        .then((data) {
      ranchOneEdges = jsonDecode(data);
      //_polygons.clear();
      ranchOneEdges['features'].forEach((v) {
        try {
          _polygons.add(Polygon(
              polygonId: PolygonId(v['geometry']['coordinates'].toString()),
              points: v['geometry']['coordinates']
                  .map<LatLng>((e) => LatLng(
                      double.parse((e[1] + 0.000099817224).toStringAsFixed(5)),
                      double.parse((e[0] + 0.00045).toStringAsFixed(5))))
                  .toList(),
              visible: true,
              strokeColor: Colors.blue,
              fillColor: Colors.blue.withOpacity(0.25),
              strokeWidth: 2));
          print(_polygons.last.points);
        } catch (e) {
          print(e);
        }
      });
      setState(() {});
    });
  }

  // Helper function that reads in/renders the block numbers
  Future<void> loadBlockNumbers() async {
    var responseData;
    responseData = json.decode(
        await rootBundle.loadString('lib/assets/ranches/Ranch_Blocks.geojson'));

    print(responseData['features'].length);
    for (int i = 0; i < responseData['features'].length; i++) {
      if (responseData['features'][i]['properties']['EntityHandle']
                  .substring(2, 4) ==
              "05" ||
          responseData['features'][i]['properties']['EntityHandle']
                  .substring(2, 4) ==
              "12" ||
          responseData['features'][i]['properties']['EntityHandle']
                  .substring(2, 4) ==
              "28" ||
          responseData['features'][i]['properties']['EntityHandle']
                  .substring(2, 4) ==
              "19" ||
          responseData['features'][i]['properties']['EntityHandle']
                  .substring(2, 4) ==
              "20") {
        print(responseData['features'][i]['properties']['Text']);
        final Uint8List desiredMarker = await assignBlockNumberMarker(
            responseData['features'][i]['properties']['Text'],
            responseData['features'][i]['properties']['EntityHandle'],
            false,
            Colors.transparent,
            Theme.of(context).colorScheme.secondary);

        var pos = LatLng(
            responseData['features'][i]['geometry']['coordinates'][0],
            responseData['features'][i]['geometry']['coordinates'][1]);

        _markers.add(Marker(
          markerId: MarkerId(
              responseData['features'][i]['properties']['EntityHandle']),
          position: pos,
          icon: BitmapDescriptor.fromBytes(desiredMarker),
          anchor: Offset(.5, .5),
          visible: true,
        ));

        blockNumbers
            .add(responseData['features'][i]['properties']['EntityHandle']);
      }
    }

    print(_markers.length);
    blockNumbers.sort();
    _blockMarkers = _markers;
    setState(() {
      _markers = _blockMarkers;
    });
  }

  int _polygonIdCounter = 1;
  void hardcodePoly(List<LatLng> llpoints, counter) {
    // make the polygon id the districtranchblock number
    // parse as int
    //check if less than 10
    //  parse with pad left
    if (int.parse(counter) < 10) {
      counter = "0" + counter;
    }

    counter = "0101" + counter;
    // add polygon to the google map widget
    _polygons.add(Polygon(
      polygonId: PolygonId(counter),
      visible: true,
      strokeColor: Colors.blue,
      fillColor: Colors.blue.withOpacity(0.25),
      strokeWidth: 2,
      points: llpoints,
      consumeTapEvents: false,
      onTap: () {
        {
          //print('$counter');

        }
      },
    ));

    // // update points to work with the geofence plugin
    // List<poly.LatLng> tempPoints = [];
    // for (var p in llpoints) {
    //   tempPoints.add(poly.LatLng(p.latitude, p.longitude));
    // }
    // // add polygon to the geofence
    // _polyGeofenceList.add(poly.PolyGeofence(
    //   id: "$counter",
    //   data: {
    //     'Block: ': '${counter.substring(4, 6)}',
    //   },
    //   polygon: tempPoints,
    // ));
  }
}
